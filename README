wetalk is invoked with a single command­line
argument
% wetalk my­port­number
which specifies the port number that wetalk will use to communicate using UDP. When wetalk runs, it will
bind itself to my­port­number and print a prompt "? " to stdout and wait for stdin input from the user. A user
commences a chat by typing the hostname and port number of the peer that he/she wishes to converse with.
wetalk sends a UDP packet to initiate a chat session by inscribing the string "wannatalk" in the datagram's
(UDP packets have historically been referred to as datagrams) payload. If the peer does not respond within 7
seconds (use SIGALRM handler to affect timeout) wetalk outputs to stdout a suitable message that indicates
no response, prints the "? " prompt and waits for user input. The user may initiate another connection or quit
the app by typing 'q' (followed by RETURN/ENTER). The peer may not respond because wetalk is not
running at the specified IP address/port number, or the UDP control message "wannatalk" was lost.
If wetalk is running at the peer, it will print to stdout the message "| chat request from peer­IP peer­port" on a
new line where peer­IP and peer­port are the IP address and port number of the initiating peer. wetalk prints
the "? " prompt on a new line and waits for user input. If the user types 'c' then a chat connection is
completed by sending a UDP datagram with payload "OK" to the requesting party. If the user enters 'n' then
the payload "KO" is sent indicating that the peer does not wish to chat. wetalk at the initiating party prints "|
doesn't want to chat", prints "? " on a new line and waits.
Once a chat session has been established, wetalk prints the prompt "> " on a newline and juggles two tasks.
First, it must read the characters (i.e., message) typed by its user and when RETURN/ENTER is input send a
UDP packet with the message as its payload. A single message is not allowed to exceed 50 bytes. If it does,
the message is truncated. The message in the UDP payload is preceded by the ASCII character 'D' indicating
that what follows is a message. If the user enters the single character 'e' (followed by RETURN/ENTER)
then this will mean that the user is done chatting and wetalk transmits a UDP packet with the single character
'E' as payload indicating session termination. wetalk at the other end prints "| chat terminated" and returns to
the "? " prompt.
Second, while a user is in the midst of typing a chat message, a chat message from the peer may arrive that
needs to be displayed. The Linux kernel will raise the SIGPOLL (equivalently SIGIO) signal when a UDP
packet arrives. The code structure of wetalk should be such that after a chat session has been established, its
main body makes a blocking call to read() or getchar() to read user input from stdin one byte at a time until
newline. When newline is entered, wetalk transmits the message in a UDP datagram as specified above.
Printing of incoming chat messages from the peer are handled asynchronously by registering with the Linux
kernel a SIGPOLL handler that handles the task of printing the received chat message to stdout. Note that
there are subtleties that must be carefully handled such as two chat messages arriving from the peer back­toback.
Since the Linux signal handling system does not keep track of how many UDP packets have been
received, before your SIGPOLL handler returns it needs to check that there are no further chat messages
waiting in the kernel buffer. Any messages from the peer should be printed on a new line and preceded by "| "
to indicate an incoming message.
To focus on the networking component of the app design, we will not utilize graphical user interfaces or use
curses to manage terminal output. talk used the curses package which allowed the a character terminal to be
split into two halves so that a user could type messages in one half and see the peer's chat messages in the
other. Curses terminal I/O programming is bug prone and challenging. GUI programming is much simpler
but not required for our purposes. We will implement simple hacks to not overly confuse the wetalk user and
make chat sessions legible. In particular, if a user is in the midst of typing "Let's go to dinn" and the message
"How about dinner?" arrives, we don't want the SIGPOLL handler to just dump the received chat message to
stdout which the user would see as "Let's go to dinnHow about dinner?". Instead, to make the chat session
more readble, the SIGPOLL handler will print on a new line the received message "| How about dinner?". It
will also print the partly typed message "Let's go to dinn" on a new line so that the user can continue typing
the message where he/she left off.
To do so, the incomplete terminal input "Let's go to dinn" must be read and remembered before the user
completes the message and types RETURN/ENTER. The simplest method is to put the terminal into raw
(i.e., unbuffered) mode from its default canonical (or cooked) mode where characters are buffered until
newline is entered (i.e., line discipline). Use Linux support for termios with tcgetattr() and tcsetattr() system
calls to switch modes. Note that since you are juggling multiple signals (SIGALRM, SIGPOLL), the socket
descriptor must be set in asynchronous mode. UDP packets may be lost and wetalk does not provide reliable
transport. We defer this functionality to the human user. That is, should a message get lost, the human would
just mimick ARQ by sending "Are you there?" and retyping the lost message. Reliable communication,
which incurs significant overhead, need not always be the responsibility of network protocols for an app to
be usable.


 GUI or the curses library makes wetalk much easier to use. Use either (curses
should be attempted by those only already familiar with low­level terminal I/O programming) to enhance the
user interface of wetalk. For example, in Linux, GTK+ may be used build simple interfaces. X Windows with
varying widget support is a more low­level approach.


How to run the various programs

1)wetalkBonus.out portno
//compile using gcc wetalkBonus.c -o wetalkBonus.out -lncurses
2)wetalk.out portno
//give input address to chat with as:
?PC1 20000
?192.168.1.1 20000
where ? is the prompt and there is a space between the address and portnumber. Please use only one space else error of invalid address
on request, c accepts, n rejects, q quits, other char do nothing.
while chatting q ends program and e ends chat 
